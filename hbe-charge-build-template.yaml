apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: hbe-charge-build-template
  namespace: argo-cicd
spec:
  securityContext:
    runAsNonRoot: false
  serviceAccountName: argo
  volumes:
    - name: shared-workspace
      persistentVolumeClaim:
        claimName: shared-data-pvc-2
    - name: credentials
      secret:
        secretName: deployment-ssh-keys
  templates:
    - name: hbe-charge-build
      inputs:
        parameters:
          - name: branch
          - name: app-name
      volumes:
        - name: shared-workspace
          persistentVolumeClaim:
            claimName: shared-data-pvc-2
      container:
        image: swr.cn-north-4.myhuaweicloud.com/ddn-k8s/docker.io/library/golang:1.23.8-alpine
        imagePullPolicy: IfNotPresent
        workingDir: /src
        volumeMounts:
          - name: shared-workspace
            mountPath: /src
        command: ["/bin/sh", "-c"]
        args:
          - |
            #!/bin/sh
            set -e

            APP="{{inputs.parameters.app-name}}"
            echo "App to build: $APP"

            if [ -z "$APP" ]; then
              echo "No app to build"
              echo -n "Build successful" > /tmp/build-output
              exit 0
            fi

            # 创建Go模块缓存目录
            mkdir -p /go-cache

            echo "Building module: $APP"
            
            if [ ! -d "app/$APP" ]; then
              echo "Error: Directory app/$APP does not exist"
              exit 1
            fi
            
            cd app/$APP
            
            if [ ! -f "main.go" ]; then
              echo "Error: main.go not found in app/$APP"
              exit 1
            fi
            
            echo "Running go build..."
            go build -o main main.go
            
            if [ ! -f "main" ]; then
              echo "Error: Failed to build main executable"
              exit 1
            fi
            
            mkdir -p /var/jenkins_home/$APP
            cp main /var/jenkins_home/$APP/
            
            # 计算程序文件的哈希值和文件大小（与 Jenkinsfile 功能保持一致）
            echo "计算哈希值..."
            sha256sum main > /var/jenkins_home/$APP/main.sha256
            # 使用 Alpine Linux 兼容的方式获取文件大小
            wc -c < main > /var/jenkins_home/$APP/main.size
            
            echo "Successfully built and processed $APP"
            
            echo -n "Build successful" > /tmp/build-output
            echo "Module built successfully"
      outputs:
        parameters:
          - name: build-output
            valueFrom:
              path: /tmp/build-output